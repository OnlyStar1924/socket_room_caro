<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>game play</title>
    <style>
        canvas {
            border: 1px solid black;
        }
    </style>
</head>
<body>
<div class="half">
    <canvas id="myCanvas" width="400" height="400"></canvas>
</div>

<script>
    var canvas = document.getElementById('myCanvas');
    var ctx = canvas.getContext("2d");

    var mouseX, mouseY;
    var step = 1;
    var win = false;

    const CELL_SIZE = 20;
    const GAP = 2;

    const colorX = '#ff0000';
    const colorO = '#0066ff';
    const color = '#000000';

    var data = new Array(20);
    for (var i = 0; i < data.length; i++) {
        data[i] = new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    }

    canvas.addEventListener("click", onClick, false);

    init();

    function init(){
        drawGrid();
    }
    function check(data,x,y){
        //hang
        var curX =x;
        var curY =y;
        var count = 1;
        while (curX - 1 >= 0 && data[curX- 1][curY] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lX=x;
                var rX=x;
                while (rX + 1 <= 20 && data[rX + 1][y] == data[x][y]){
                    rX++;
                }
                while (lX - 1 >= 0 && data[lX - 1][y] == data[x][y]){
                    lX--;
                }
                ctx.moveTo(20*lX,20*y+10);
                ctx.lineTo(20*rX+20,20*y+10);
                ctx.stroke();


                win = true;

            }
            curX--;
        }
        curX =x;
        curY =y;
        while (curX + 1 <= 20 && data[curX + 1][curY] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lX=x;
                var rX=x;
                while (rX + 1 <= 20 && data[rX + 1][y] == data[x][y]){
                    rX++;
                }
                while (lX - 1 >= 0 && data[lX - 1][y] == data[x][y]){
                    lX--;
                }
                ctx.moveTo(20*lX,20*y+10);
                ctx.lineTo(20*rX+20,20*y+10);
                ctx.stroke();

                win = true;
            }
            curX++;
        }
        //cot
        curX =x;
        curY =y;
        count = 1;
        while (curY - 1 >= 0 && data[curX][curY-1] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lY=y;
                var rY=y;
                while (rY + 1 <= 20 && data[x][rY+1] == data[x][y]){
                    rY++;
                }
                while (lY - 1 >= 0 && data[x][lY-1] == data[x][y]){
                    lY--;
                }
                ctx.moveTo(20*x+10,20*lY);
                ctx.lineTo(20*x+10,20*rY+20);
                ctx.stroke();

                win = true;
            }
            curY--;
        }
        curX =x;
        curY =y;
        while (curY + 1 <= 20 && data[curX][curY+1] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lY=y;
                var rY=y;
                while (rY + 1 <= 20 && data[x][rY+1] == data[x][y]){
                    rY++;
                }
                while (lY - 1 >= 0 && data[x][lY-1] == data[x][y]){
                    lY--;
                }
                ctx.moveTo(20*x+10,20*lY);
                ctx.lineTo(20*x+10,20*rY+20);
                ctx.stroke();

                win = true;
            }
            curY++;
        }
        //cheo chinh
        curX =x;
        curY =y;
        count = 1;
        while (curX-1 >= 0 && curY-1 >=0 && data[curX-1][curY-1] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lX=x;
                var rX=x;
                var lY=y;
                var rY=y;
                while (rY + 1 <= 20 && rX +1<=20 && data[rX+1][rY+1] == data[x][y]){
                    rY++;
                    rX++;
                }
                while (lY - 1 >= 0 && lX-1>=0 && data[lX-1][lY-1] == data[x][y]){
                    lY--;
                    lX--;
                }
                ctx.moveTo(20*lX,20*lY);
                ctx.lineTo(20*rX+20,20*rY+20);
                ctx.stroke();

                win = true;
            }
            curX--;
            curY--;
        }
        curX =x;
        curY =y;
        while (curY+1<=20 && curX+1<=20 && data[curX+1][curY+1] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lX=x;
                var rX=x;
                var lY=y;
                var rY=y;
                while (rY + 1 <= 20 && rX +1<=20 && data[rX+1][rY+1] == data[x][y]){
                    rY++;
                    rX++;
                }
                while (lY - 1 >= 0 && lX-1>=0 && data[lX-1][lY-1] == data[x][y]){
                    lY--;
                    lX--;
                }
                ctx.moveTo(20*lX,20*lY);
                ctx.lineTo(20*rX+20,20*rY+20);
                ctx.stroke();

                win = true;
            }
            curY++;
            curX++;
        }
        //cheo phu
        curX =x;
        curY =y;
        count = 1;
        while (curX+1 <= 20 && curY-1 >=0 && data[curX+1][curY-1] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lX=x;
                var rX=x;
                var lY=y;
                var rY=y;
                while (rY -1 >= 0 && rX +1<=20 && data[rX+1][rY-1] == data[x][y]){
                    rY--;
                    rX++;
                }
                while (lY + 1 <= 20 && lX-1>=0 && data[lX-1][lY+1] == data[x][y]){
                    lY++;
                    lX--;
                }
                ctx.moveTo(20*rX+20,20*rY);
                ctx.lineTo(20*lX,20*lY+20);
                ctx.stroke();


                win = true;
            }
            curX++;
            curY--;
        }
        curX =x;
        curY =y;
        while (curY+1<=20 && curX-1>=0 && data[curX-1][curY+1] == data[x][y])
        {
            count++;
            if(count >= 5){
                var lX=x;
                var rX=x;
                var lY=y;
                var rY=y;
                while (rY -1 >= 0 && rX +1<=20 && data[rX+1][rY-1] == data[x][y]){
                    rY--;
                    rX++;
                }
                while (lY + 1 <= 20 && lX-1>=0 && data[lX-1][lY+1] == data[x][y]){
                    lY++;
                    lX--;
                }
                ctx.moveTo(20*rX+20,20*rY);
                ctx.lineTo(20*lX,20*lY+20);
                ctx.stroke();

                win = true;
            }
            curY++;
            curX--;
        }
        if (win == true)
        alert("nguoi choi "+data[x][y]+" thang");
    }

    // implement draw grid line here
    function drawGrid(){
        for(let i =0; i<400; i+=20){
            ctx.strokeStyle = color;
            ctx.moveTo(20+i,0);
            ctx.lineTo(20+i,400);
            ctx.stroke();
        }
        for(let i =0; i<400; i+=20){
            ctx.strokeStyle = color;
            ctx.moveTo(0,20+i);
            ctx.lineTo(400,20+i);
            ctx.stroke();
        }
    }

    // process mouse click
    function onClick(e) {
        mouseX = e.pageX - canvas.offsetLeft;
        mouseY = e.pageY - canvas.offsetTop;
        if(win == false){
            if (step % 2){
                turnX(mouseX, mouseY);
                step++;
            }
            else{
                turnO(mouseX, mouseY);
                step++;
            }

        }
    }

    function turnX(mouseX, mouseY){
        drawX(mouseX, mouseY);
    }

    function turnO(mouseX, mouseY){
        drawO(mouseX, mouseY);
    }

    function drawX(x, y) {
        var posX=Math.floor( x / CELL_SIZE );
        var posY=Math.floor( y / CELL_SIZE );
        if (canvas.getContext && data[posX][posY]==0){
            let pos = convertToCellPos(x, y);

            ctx.beginPath();
            let diff = CELL_SIZE / 2 - GAP;

            ctx.moveTo(pos[0] - diff, pos[1] - diff);
            ctx.lineTo(pos[0] + diff, pos[1] + diff);
            ctx.strokeStyle = colorX;
            ctx.stroke();

            ctx.moveTo(pos[0] + diff, pos[1] - diff);
            ctx.lineTo(pos[0] - diff, pos[1] + diff);

            ctx.strokeStyle = colorX;
            ctx.stroke();
            data[posX][posY]=1;
            check(data,posX,posY);

        }

    }


    function drawO(x, y)
    {
        var posX=Math.floor( x / CELL_SIZE );
        var posY=Math.floor( y / CELL_SIZE );
        if (canvas.getContext && data[posX][posY]==0)
        {
            let pos = convertToCellPos(x, y);

            let radius = CELL_SIZE / 2 - GAP;
            ctx.beginPath();
            ctx.arc(pos[0], pos[1], radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 1;

            ctx.strokeStyle = colorO;
            ctx.stroke();

            data[posX][posY]=2;
            check(data,posX,posY);
        }
    }

    function convertToCellPos(x, y){
        return new Array(Math.floor( x / CELL_SIZE ) * CELL_SIZE + CELL_SIZE / 2, Math.floor( y / CELL_SIZE ) * CELL_SIZE + CELL_SIZE / 2);
    }

</script>

</body>
</html>