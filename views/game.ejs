<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>game play</title>
    <link rel='stylesheet' href='/stylesheets/game.css'/>
    <style>
        canvas {
            border: 1px solid black;
        }
    </style>
</head>
<body>
<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

<div class="half">
    <canvas id="myCanvas" width="400" height="400"></canvas>
</div>

<div id="lobby">
    <div class="content">
        <ul id="chat_content"></ul>
        <ul id="chat_online_list"></ul>
    </div>
    <ul class="input">
        <li><input id="chat_message" type="text" placeholder="Nội dung chat"/></li>
        <li><input id="chat_send" type="button" value="Gửi"></li>
    </ul>
</div>

<script>
    const socket = io({
        transports: ['websocket']
    });

    var canvas = document.getElementById('myCanvas');
    var ctx = canvas.getContext("2d");

    var mouseX, mouseY;
    var step = 1;
    var win = false;

    const CELL_SIZE = 20;
    const GAP = 2;

    const colorX = '#ff0000';
    const colorO = '#0066ff';
    const color = '#000000';

    var data = new Array(20);
    for (var i = 0; i < data.length; i++) {
        data[i] = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    canvas.addEventListener("click", onClick, false);

    init();

    function init() {
        drawGrid();
    }

    function check(data, x, y) {
        //hang
        var curX = x;
        var curY = y;
        var count = 1;
        while (curX - 1 >= 0 && data[curX - 1][curY] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lX = x;
                var rX = x;
                while (rX + 1 <= 20 && data[rX + 1][y] == data[x][y]) {
                    rX++;
                }
                while (lX - 1 >= 0 && data[lX - 1][y] == data[x][y]) {
                    lX--;
                }
                ctx.moveTo(20 * lX, 20 * y + 10);
                ctx.lineTo(20 * rX + 20, 20 * y + 10);
                ctx.stroke();


                win = true;

            }
            curX--;
        }
        curX = x;
        curY = y;
        while (curX + 1 <= 20 && data[curX + 1][curY] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lX = x;
                var rX = x;
                while (rX + 1 <= 20 && data[rX + 1][y] == data[x][y]) {
                    rX++;
                }
                while (lX - 1 >= 0 && data[lX - 1][y] == data[x][y]) {
                    lX--;
                }
                ctx.moveTo(20 * lX, 20 * y + 10);
                ctx.lineTo(20 * rX + 20, 20 * y + 10);
                ctx.stroke();

                win = true;
            }
            curX++;
        }
        //cot
        curX = x;
        curY = y;
        count = 1;
        while (curY - 1 >= 0 && data[curX][curY - 1] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lY = y;
                var rY = y;
                while (rY + 1 <= 20 && data[x][rY + 1] == data[x][y]) {
                    rY++;
                }
                while (lY - 1 >= 0 && data[x][lY - 1] == data[x][y]) {
                    lY--;
                }
                ctx.moveTo(20 * x + 10, 20 * lY);
                ctx.lineTo(20 * x + 10, 20 * rY + 20);
                ctx.stroke();

                win = true;
            }
            curY--;
        }
        curX = x;
        curY = y;
        while (curY + 1 <= 20 && data[curX][curY + 1] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lY = y;
                var rY = y;
                while (rY + 1 <= 20 && data[x][rY + 1] == data[x][y]) {
                    rY++;
                }
                while (lY - 1 >= 0 && data[x][lY - 1] == data[x][y]) {
                    lY--;
                }
                ctx.moveTo(20 * x + 10, 20 * lY);
                ctx.lineTo(20 * x + 10, 20 * rY + 20);
                ctx.stroke();

                win = true;
            }
            curY++;
        }
        //cheo chinh
        curX = x;
        curY = y;
        count = 1;
        while (curX - 1 >= 0 && curY - 1 >= 0 && data[curX - 1][curY - 1] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lX = x;
                var rX = x;
                var lY = y;
                var rY = y;
                while (rY + 1 <= 20 && rX + 1 <= 20 && data[rX + 1][rY + 1] == data[x][y]) {
                    rY++;
                    rX++;
                }
                while (lY - 1 >= 0 && lX - 1 >= 0 && data[lX - 1][lY - 1] == data[x][y]) {
                    lY--;
                    lX--;
                }
                ctx.moveTo(20 * lX, 20 * lY);
                ctx.lineTo(20 * rX + 20, 20 * rY + 20);
                ctx.stroke();

                win = true;
            }
            curX--;
            curY--;
        }
        curX = x;
        curY = y;
        while (curY + 1 <= 20 && curX + 1 <= 20 && data[curX + 1][curY + 1] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lX = x;
                var rX = x;
                var lY = y;
                var rY = y;
                while (rY + 1 <= 20 && rX + 1 <= 20 && data[rX + 1][rY + 1] == data[x][y]) {
                    rY++;
                    rX++;
                }
                while (lY - 1 >= 0 && lX - 1 >= 0 && data[lX - 1][lY - 1] == data[x][y]) {
                    lY--;
                    lX--;
                }
                ctx.moveTo(20 * lX, 20 * lY);
                ctx.lineTo(20 * rX + 20, 20 * rY + 20);
                ctx.stroke();

                win = true;
            }
            curY++;
            curX++;
        }
        //cheo phu
        curX = x;
        curY = y;
        count = 1;
        while (curX + 1 <= 20 && curY - 1 >= 0 && data[curX + 1][curY - 1] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lX = x;
                var rX = x;
                var lY = y;
                var rY = y;
                while (rY - 1 >= 0 && rX + 1 <= 20 && data[rX + 1][rY - 1] == data[x][y]) {
                    rY--;
                    rX++;
                }
                while (lY + 1 <= 20 && lX - 1 >= 0 && data[lX - 1][lY + 1] == data[x][y]) {
                    lY++;
                    lX--;
                }
                ctx.moveTo(20 * rX + 20, 20 * rY);
                ctx.lineTo(20 * lX, 20 * lY + 20);
                ctx.stroke();


                win = true;
            }
            curX++;
            curY--;
        }
        curX = x;
        curY = y;
        while (curY + 1 <= 20 && curX - 1 >= 0 && data[curX - 1][curY + 1] == data[x][y]) {
            count++;
            if (count >= 5) {
                var lX = x;
                var rX = x;
                var lY = y;
                var rY = y;
                while (rY - 1 >= 0 && rX + 1 <= 20 && data[rX + 1][rY - 1] == data[x][y]) {
                    rY--;
                    rX++;
                }
                while (lY + 1 <= 20 && lX - 1 >= 0 && data[lX - 1][lY + 1] == data[x][y]) {
                    lY++;
                    lX--;
                }
                ctx.moveTo(20 * rX + 20, 20 * rY);
                ctx.lineTo(20 * lX, 20 * lY + 20);
                ctx.stroke();

                win = true;
            }
            curY++;
            curX--;
        }
        if (win == true)
            alert("nguoi choi " + data[x][y] + " thang");
    }

    // implement draw grid line here
    function drawGrid() {
        for (let i = 0; i < 400; i += 20) {
            ctx.strokeStyle = color;
            ctx.moveTo(20 + i, 0);
            ctx.lineTo(20 + i, 400);
            ctx.stroke();
        }
        for (let i = 0; i < 400; i += 20) {
            ctx.strokeStyle = color;
            ctx.moveTo(0, 20 + i);
            ctx.lineTo(400, 20 + i);
            ctx.stroke();
        }
    }

    // socket.on('chat', (msg) => {
    //     console.log('chat'); // true
    //     console.log(msg); // true
    //     chatContent.insertAdjacentHTML('beforeend', `<li><strong>${onlineUserObj[msg.senderId].username}:</strong> ${msg.content}</li>`)
    //
    // });
   //${onlineUserObj[msg.senderId].username}
    var dd;
    var luotdi =true;
    socket.on('data play', function (pdata) {
        console.log(pdata.senderId);
        console.log(pdata.content);

        if (win == false) {
            if (  luotdi == true ) {
                drawX(pdata.content.x,pdata.content.y);
                dd=false;
                luotdi=false;
            } else  {
                drawO(pdata.content.x,pdata.content.y);
                dd=false;
                luotdi=true;
            }
        }
    });
    // process mouse click

    function onClick(e) {
        mouseX = e.pageX - canvas.offsetLeft;
        mouseY = e.pageY - canvas.offsetTop;
        var posX=Math.floor( mouseX / CELL_SIZE );
        var posY=Math.floor( mouseY / CELL_SIZE );
        if (data[posX][posY]==0 ){
            dd=true;
            socket.emit('data play', {
                x: posX,
                y: posY,
                turn: luotdi,
                status: dd
            });

        }
    }
    /*
    function onClick(e) {
        mouseX = e.pageX - canvas.offsetLeft;
        mouseY = e.pageY - canvas.offsetTop;
        var posX = Math.floor(mouseX / CELL_SIZE);
        var posY = Math.floor(mouseY / CELL_SIZE);

        if (win == false && data[posX][posY] == 0) {
            if (step % 2)
                drawX(posX, posY);
            else
                drawO(posX, posY);
        }

    }
    */

    function drawX(x, y) {

        if (canvas.getContext) {

            ctx.beginPath();
            ctx.moveTo(x * CELL_SIZE, y * CELL_SIZE);
            ctx.lineTo((x + 1) * CELL_SIZE, (y + 1) * CELL_SIZE);
            ctx.strokeStyle = colorX;
            ctx.stroke();

            ctx.moveTo((x + 1) * CELL_SIZE, y * CELL_SIZE);
            ctx.lineTo(x * CELL_SIZE, (y + 1) * CELL_SIZE);

            ctx.strokeStyle = colorX;
            ctx.stroke();
            data[x][y] = 1;

            check(data, x, y);
        }
    }


    function drawO(x, y) {

        if (canvas.getContext) {
            let radius = CELL_SIZE / 2 - GAP;
            ctx.beginPath();
            ctx.arc(x * CELL_SIZE + CELL_SIZE / 2, y * CELL_SIZE + CELL_SIZE / 2, radius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 1;

            ctx.strokeStyle = colorO;
            ctx.stroke();

            data[x][y] = 2;
            step++;
            check(data, x, y);
        }
    }

    //xu ly socket

    window.addEventListener('load', function () {
        var onlineUserList = document.getElementById('chat_online_list');
        var chatContent = document.getElementById('chat_content');
        var chatMessage = document.getElementById('chat_message');
        var chatSendBtn = document.getElementById('chat_send');
        var onlineUserObj;
        console.log('All assets are loaded');


        socket.on('connect', () => {
            console.log(socket.connected);
        });

        socket.on('disconnect', () => {
            window.location.href = "/";
        });

        socket.on('online_user_list', (msg) => {
            console.log('online_user_list');
            console.log(msg); // true
            onlineUserObj = msg;
            for (var key in msg) {
                onlineUserList.insertAdjacentHTML('beforeend', `<li id="${msg[key].socketId}">${msg[key].username} - ${msg[key].socketId}</li>`)
            }
        });
        socket.on('user_online', (msg) => {
            console.log('user_online'); // true
            console.log(msg); // true
            if (onlineUserObj.hasOwnProperty(msg.socketId)) {
                document.getElementById(msg.socketId).outerHTML = "";
            }
            onlineUserObj[msg.socketId] = msg;
            onlineUserList.insertAdjacentHTML('beforeend', `<li id="${msg.socketId}">${msg.username} - ${msg.socketId}</li>`)
        });
        socket.on('user_offline', (msg) => {
            console.log('user_offline'); // true
            console.log(msg); // true
            if (!!onlineUserObj && onlineUserObj.hasOwnProperty(msg.socketId)) {
                delete onlineUserObj[msg.socketId];
                document.getElementById(msg.socketId).outerHTML = "";
            }
        });
        socket.on('chat', (msg) => {
            console.log('chat'); // true
            console.log(msg); // true
            chatContent.insertAdjacentHTML('beforeend', `<li><strong>${onlineUserObj[msg.senderId].username}:</strong> ${msg.content}</li>`)

        });
        chatSendBtn.addEventListener("click", () => {
            if (chatMessage.value.length > 0) {
                socket.emit("sent_msg", chatMessage.value);
                chatMessage.value = "";
            }
        })
    })


</script>

</body>
</html>